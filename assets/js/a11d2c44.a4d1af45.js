"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[1581],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>m});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=t.createContext({}),s=function(e){var n=t.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},p=function(e){var n=s(e.components);return t.createElement(d.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(a),g=r,m=u["".concat(d,".").concat(g)]||u[g]||c[g]||o;return a?t.createElement(m,i(i({ref:n},p),{},{components:a})):t.createElement(m,i({ref:n},p))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=g;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},7488:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var t=a(7462),r=(a(7294),a(3905));const o={},i="Upgrading Key Managers",l={unversionedId:"node/run-your-node/keymanager-node/key-manager-upgrade",id:"node/run-your-node/keymanager-node/key-manager-upgrade",title:"Upgrading Key Managers",description:"This guide will describe how to upgrade a key manager node.",source:"@site/docs/node/run-your-node/keymanager-node/key-manager-upgrade.md",sourceDirName:"node/run-your-node/keymanager-node",slug:"/node/run-your-node/keymanager-node/key-manager-upgrade",permalink:"/node/run-your-node/keymanager-node/key-manager-upgrade",draft:!1,editUrl:"https://github.com/oasisprotocol/docs/edit/main/docs/node/run-your-node/keymanager-node/key-manager-upgrade.md",tags:[],version:"current",lastUpdatedAt:1678701669,formattedLastUpdatedAt:"Mar 13, 2023",frontMatter:{},sidebar:"operators",previous:{title:"Signing Key Manager Policy",permalink:"/node/run-your-node/keymanager-node/signing-key-manager-policy"},next:{title:"IAS Proxy",permalink:"/node/run-your-node/ias-proxy"}},d={},s=[{value:"About the Upgrade",id:"about-the-upgrade",level:2},{value:"Safe Upgrade Procedure",id:"safe-upgrade-procedure",level:2},{value:"Upgrade Nodes",id:"upgrade-nodes",level:3},{value:"After the Upgrade",id:"after-the-upgrade",level:3},{value:"Verifying Successful Replication",id:"verifying-successful-replication",level:4},{value:"Troubleshooting",id:"troubleshooting",level:2}],p={toc:s},u="wrapper";function c(e){let{components:n,...a}=e;return(0,r.kt)(u,(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"upgrading-key-managers"},"Upgrading Key Managers"),(0,r.kt)("p",null,"This guide will describe how to upgrade a key manager node."),(0,r.kt)("h2",{id:"about-the-upgrade"},"About the Upgrade"),(0,r.kt)("p",null,"Every key manager node contains all the keys used by confidential ParaTimes\ninside its TEE-encrypted state. The key material is sealed and can only be\ndecrypted by exactly the same TEE enclave running on the exactly same CPU. This\nmeans that newer key manager ParaTimes can not read the key material and that\nkey material can not be restored on another machine. "),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"During a key manager node upgrade it is therefore essential that the key\nmaterial is not lost, not even due to an operational error or even a\ncatastrophically failed upgrade.")),(0,r.kt)("h2",{id:"safe-upgrade-procedure"},"Safe Upgrade Procedure"),(0,r.kt)("p",null,"A key manager node's upgrade procedure differs from other Oasis nodes upgrades\nbecause the upgraded node cannot unseal/decrypt the old key manager's state."),(0,r.kt)("p",null,"To upgrade a key manager node, we need to delete the local state and let the\nkey manager's state replicate itself from other nodes. Only one key manager\nruntime in the configuration file can be present at once. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"In case you are running multiple key manager nodes always follow the safe\nupgrade procedure:")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Keep approximately one half of nodes running the old version."),(0,r.kt)("li",{parentName:"ol"},"Upgrade the other half."),(0,r.kt)("li",{parentName:"ol"},"Wait for the ParaTime upgrade epoch."),(0,r.kt)("li",{parentName:"ol"},"Verify that secrets have been replicated ",(0,r.kt)("a",{parentName:"li",href:"#verifying-successful-replication"},"as shown below"),"."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Verify again.")),(0,r.kt)("li",{parentName:"ol"},"Upgrade the rest of the nodes.")),(0,r.kt)("h3",{id:"upgrade-nodes"},"Upgrade Nodes"),(0,r.kt)("p",null,"To upgrade a key manager node, follow the next steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Stop the node."),(0,r.kt)("li",{parentName:"ol"},"Wipe its local state ",(0,r.kt)("inlineCode",{parentName:"li"},"worker-local-storage.badger.db"),", e.g.:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"rm -rf runtimes/4000000000000000000000000000000000000000000000004a1a53dff2ae482d/worker-local-storage.badger.db/\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Upgrade the key manager runtime: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"get the new ORC file (",(0,r.kt)("a",{parentName:"li",href:"../../mainnet/#key-manager"},"mainnet"),", ",(0,r.kt)("a",{parentName:"li",href:"../../testnet/#key-manager"},"testnet"),"); "),(0,r.kt)("li",{parentName:"ul"},"update the configuration to replace the ORC file; and"),(0,r.kt)("li",{parentName:"ul"},"restart the node."))),(0,r.kt)("li",{parentName:"ol"},"Wait for the key material to get replicated from active nodes before\ncontinuing."),(0,r.kt)("li",{parentName:"ol"},"Verify that secrets have been replicated ",(0,r.kt)("a",{parentName:"li",href:"#verifying-successful-replication"},"as shown below"),".")),(0,r.kt)("h3",{id:"after-the-upgrade"},"After the Upgrade"),(0,r.kt)("h4",{id:"verifying-successful-replication"},"Verifying Successful Replication"),(0,r.kt)("p",null,"After the upgrade epoch and when the key material is successfully replicated,\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"control status")," output should show ",(0,r.kt)("inlineCode",{parentName:"p"},'keymanager.status="ready"')," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"registration.descriptor.runtimes.0.extra_info")," should contain a hash of the\nkey material state:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ oasis_node oasis-node -a unix:/storage/node/internal.sock control status\n...\n  "registration": {\n    "last_registration": "2023-02-06T08:40:30Z",\n    "descriptor": {\n...\n      "runtimes": [\n        {\n          "id": "4000000000000000000000000000000000000000000000004a1a53dff2ae482d",\n          "version": {\n            "minor": 3,\n            "patch": 3\n          },\n          "capabilities": {\n            "tee": {\n              "hardware": 1,\n...\n            }\n          },\n          "extra_info": "omlzaWduYXR1cmVYQG7nDuKTOUKAlJAfukdY6Xljox376lCLI0cIP0zPw2B8abJxa31j+NoQAWA0KZuHD41XPyICmjXDTpjDXukEEgVtaW5pdF9yZXNwb25zZaNoY2hlY2tzdW1YIEWZF5YaFQChstrZ9u1UdgyqZCagmNfghvyQna9WkmvyaWlzX3NlY3VyZfVvcG9saWN5X2NoZWNrc3VtWCCsrqRzYjx05t+KoCYz7wFSdKJ720g2LQBAsRKXmClMvw=="\n        }\n      ],\n      "roles": "key-manager",\n    }\n  }\n...\n  "keymanager": {\n    "status": "ready",\n    "may_generate": false,\n    "runtime_id": "4000000000000000000000000000000000000000000000004a1a53dff2ae482d",\n    "client_runtimes": [\n      "000000000000000000000000000000000000000000000000a6d1e3ebf60dff6c",\n      "0000000000000000000000000000000000000000000000000000000000000000"\n    ],\n    "access_list": [\n...\n    ],\n    "private_peers": [\n...\n    ]\n  }\n')),(0,r.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("p",null,"If you forgot to wipe the key manager's state when upgrading, the upgraded Key\nManager will be unable to unseal the old state and will abort:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{"level":"warn","module":"runtime","msg":"thread \'main\' panicked at \'runtime execution failed: Enclave panicked.\', runtime-loader/bin/main.rs:57:10","runtime_id":"4000000000000000000000000000000000000000000000004a1a53dff2ae482d","runtime_name":"keymanager","ts":"2022-11-11T13:38:18.805919693Z"}\n')))}c.isMDXComponent=!0}}]);