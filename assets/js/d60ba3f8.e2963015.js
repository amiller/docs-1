"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[97],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),o=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=o(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),m=o(a),u=i,k=m["".concat(s,".").concat(u)]||m[u]||c[u]||r;return a?n.createElement(k,l(l({ref:t},d),{},{components:a})):n.createElement(k,l({ref:t},d))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[m]="string"==typeof e?e:i,l[1]=p;for(var o=2;o<r;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4561:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>p,toc:()=>o});var n=a(7462),i=(a(7294),a(3905));const r={description:"Additional Sapphire precompiles for encryption and confidentiality"},l="Precompiles",p={unversionedId:"dapp/sapphire/precompiles",id:"dapp/sapphire/precompiles",title:"Precompiles",description:"Additional Sapphire precompiles for encryption and confidentiality",source:"@site/docs/dapp/sapphire/precompiles.md",sourceDirName:"dapp/sapphire",slug:"/dapp/sapphire/precompiles",permalink:"/dapp/sapphire/precompiles",draft:!1,editUrl:"https://github.com/oasisprotocol/docs/edit/main/docs/dapp/sapphire/precompiles.md",tags:[],version:"current",lastUpdatedAt:1678701669,formattedLastUpdatedAt:"Mar 13, 2023",frontMatter:{description:"Additional Sapphire precompiles for encryption and confidentiality"},sidebar:"developers",previous:{title:"Browser Support",permalink:"/dapp/sapphire/browser"},next:{title:"Standard Contract Addresses",permalink:"/dapp/sapphire/addresses"}},s={},o=[{value:"Library",id:"library",level:2},{value:"Generating Pseudo-Random Bytes",id:"generating-pseudo-random-bytes",level:2},{value:"Overview",id:"overview",level:3},{value:"X25519 Key Derivation",id:"x25519-key-derivation",level:2},{value:"Overview",id:"overview-1",level:3},{value:"Example",id:"example",level:3},{value:"Deoxys-II Encryption",id:"deoxys-ii-encryption",level:2},{value:"Overview",id:"overview-2",level:3},{value:"Example",id:"example-1",level:3},{value:"Public/Private Signing Key Pair Generation",id:"publicprivate-signing-key-pair-generation",level:2},{value:"Overview",id:"overview-3",level:3},{value:"Example",id:"example-2",level:3},{value:"Message Signing",id:"message-signing",level:2},{value:"Overview",id:"overview-4",level:3},{value:"Example",id:"example-3",level:3},{value:"Signature Verification",id:"signature-verification",level:2},{value:"Overview",id:"overview-5",level:3},{value:"Example",id:"example-4",level:3}],d={toc:o},m="wrapper";function c(e){let{components:t,...a}=e;return(0,i.kt)(m,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"precompiles"},"Precompiles"),(0,i.kt)("p",null,"In addition to the standard EVM precompiles, Sapphire provides a number\nof further cryptography-related ones to make some operations easier and\ncheaper to perform: x25519 key derivation, Deoxys-II-based encryption\nand decryption, signing key generation, message digest signing and\nverification."),(0,i.kt)("p",null,"These can be called in the same way as other precompiles by dispatching\ncalls to specific well-known contract addresses, as described below."),(0,i.kt)("p",null,"Input parameters should be packed into a contiguous memory region with\neach chunk of data padded to 32 bytes as usual. The recommended way to\nconstruct parameter byte sequences in Solidity is with ",(0,i.kt)("inlineCode",{parentName:"p"},"abi.encode")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"abi.decode"),", which will transparently handle things like putting\n",(0,i.kt)("inlineCode",{parentName:"p"},"bytes")," lengths in the correct position."),(0,i.kt)("h2",{id:"library"},"Library"),(0,i.kt)("p",null,"While it is possible to call the precompiles directly using Yul or, for\nexample, ",(0,i.kt)("inlineCode",{parentName:"p"},"abi.encode")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"abi.decode")," in Solidity, we recommend always\nusing the wrapper library for a more comfortable experience. The\nexamples below are written against it. It is provided in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"contracts/")," project in the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/oasisprotocol/sapphire-paratime"},"Sapphire repository"),",\nlibrary file ",(0,i.kt)("inlineCode",{parentName:"p"},"contracts/Sapphire.sol"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'pragma solidity ^0.8.13;\n\nimport "./Sapphire.sol";\n\ncontract Test {\n    constructor() {}\n    function test() public view returns (bytes32) {\n        return Sapphire.deriveSymmetricKey("public key as bytes32", "private key as bytes32");\n    }\n}\n')),(0,i.kt)("h2",{id:"generating-pseudo-random-bytes"},"Generating Pseudo-Random Bytes"),(0,i.kt)("h3",{id:"overview"},"Overview"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Precompile address: ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0100000000000000000000000000000000000001")),(0,i.kt)("li",{parentName:"ul"},"Parameters: ",(0,i.kt)("inlineCode",{parentName:"li"},"uint num_bytes, bytes pers")),(0,i.kt)("li",{parentName:"ul"},"Gas cost: 10,000 minimum plus 240 per output word plus 60 per word of\nthe personalization string.")),(0,i.kt)("p",null,"Generate ",(0,i.kt)("inlineCode",{parentName:"p"},"num_bytes")," pseudo-random bytes, with an optional\npersonalization string added into the hashing algorithm to increase\ndomain separation when needed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'bytes memory randomPad = Sapphire.randomBytes(64, "");\n')),(0,i.kt)("h2",{id:"x25519-key-derivation"},"X25519 Key Derivation"),(0,i.kt)("h3",{id:"overview-1"},"Overview"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Precompile address: ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0100000000000000000000000000000000000002")),(0,i.kt)("li",{parentName:"ul"},"Parameters: ",(0,i.kt)("inlineCode",{parentName:"li"},"bytes32 public_key, bytes32 private_key")),(0,i.kt)("li",{parentName:"ul"},"Gas cost: 100,000")),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes32 publicKey = ... ;\nbytes32 privateKey = ... ;\nbytes32 symmetric = Sapphire.deriveSymmetricKey(publicKey, privateKey);\n")),(0,i.kt)("h2",{id:"deoxys-ii-encryption"},"Deoxys-II Encryption"),(0,i.kt)("h3",{id:"overview-2"},"Overview"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Encryption precompile address: ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0100000000000000000000000000000000000003")),(0,i.kt)("li",{parentName:"ul"},"Decryption precompile address: ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0100000000000000000000000000000000000004")),(0,i.kt)("li",{parentName:"ul"},"Parameters: ",(0,i.kt)("inlineCode",{parentName:"li"},"bytes32 key, bytes32 nonce, bytes text_or_ciphertext, bytes additional_data")),(0,i.kt)("li",{parentName:"ul"},"Gas cost: 50,000 minimum plus 100 per word of input")),(0,i.kt)("h3",{id:"example-1"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'bytes32 key = ... ;\nbytes32 nonce = ... ;\nbytes memory text = "plain text";\nbytes memory ad = "additional data";\nbytes memory encrypted = Sapphire.encrypt(key, nonce, text, ad);\nbytes memory decrypted = Sapphire.decrypt(key, nonce, encrypted, ad);\n')),(0,i.kt)("h2",{id:"publicprivate-signing-key-pair-generation"},"Public/Private Signing Key Pair Generation"),(0,i.kt)("h3",{id:"overview-3"},"Overview"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Precompile address: ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0100000000000000000000000000000000000005")),(0,i.kt)("li",{parentName:"ul"},"Parameters: ",(0,i.kt)("inlineCode",{parentName:"li"},"uint method, bytes seed")),(0,i.kt)("li",{parentName:"ul"},"Return value: ",(0,i.kt)("inlineCode",{parentName:"li"},"bytes public_key, bytes private_key")),(0,i.kt)("li",{parentName:"ul"},"Gas cost: method-dependent base cost, see below")),(0,i.kt)("p",null,"The available methods are items in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Sapphire.SigningAlg")," enum. Note,\nhowever, that the generation method ignores subvariants, so all three\ned25519-based are equivalent, and all secp256k1-based methods are\nequivalent. ",(0,i.kt)("inlineCode",{parentName:"p"},"Sr25519")," is not available and will return an error."),(0,i.kt)("p",null,"Costs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Ed25519Oasis"),"), ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Ed25519Pure"),"), ",(0,i.kt)("inlineCode",{parentName:"li"},"2")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Ed25519PrehashedSha512"),") - ed25519: cost 35,000,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"3")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Secp256k1Oasis"),"), ",(0,i.kt)("inlineCode",{parentName:"li"},"4")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Secp256k1PrehashedKeccak256"),"), ",(0,i.kt)("inlineCode",{parentName:"li"},"5")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Secp256k1PrehashedSha256"),") - secp256k1: cost 110,000.")),(0,i.kt)("h3",{id:"example-2"},"Example"),(0,i.kt)("p",null,"Using the Sapphire library:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'bytes memory seed = hex"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";\nbytes memory publicKey;\nbytes memory privateKey;\n(publicKey, privateKey) = Sapphire.generateSigningKeyPair(Sapphire.SigningAlg.Ed25519Pure, seed);\n')),(0,i.kt)("h2",{id:"message-signing"},"Message Signing"),(0,i.kt)("h3",{id:"overview-4"},"Overview"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Precompile address: ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0100000000000000000000000000000000000006")),(0,i.kt)("li",{parentName:"ul"},"Parameters: ",(0,i.kt)("inlineCode",{parentName:"li"},"uint method, bytes private_key, bytes context_or_digest, bytes message")),(0,i.kt)("li",{parentName:"ul"},"Gas cost: see below for the method-dependent base cost, plus 8 per word of context and message except digest.")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"context_or_digest")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"messages")," parameters change in meaning\nslightly depending on the method requested. For methods that take a\ncontext value in addition to the message, pass the context in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"context_or_digest")," parameter and use ",(0,i.kt)("inlineCode",{parentName:"p"},"message")," as expected. For methods\nthat take a pre-existing hash of the message, pass that in\n",(0,i.kt)("inlineCode",{parentName:"p"},"context_or_digest")," and leave ",(0,i.kt)("inlineCode",{parentName:"p"},"message")," empty."),(0,i.kt)("p",null,"Ensure that the digest matches the selected method when using variants\nthat take a pre-existing hashes."),(0,i.kt)("p",null,"Available methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Ed25519Oasis"),"): takes a context, gas cost 75,000,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Ed25519Pure"),"): pass empty context, gas cost 75,000,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"2")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Ed25519PrehashedSha512"),"):, takes a pre-existing hash, gas cost 75,000,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"3")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Secp256k1Oasis"),"): takes a context, gas cost 150,000,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"4")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Secp256k1PrehashedKeccak256"),"): takes a pre-existing hash, gas cost 150,000,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"5")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Secp256k1PrehashedSha256"),"): takes a pre-existing hash, gas cost 150,000.")),(0,i.kt)("h3",{id:"example-3"},"Example"),(0,i.kt)("p",null,"Using the Sapphire library:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'bytes memory publicKey = ...;\nbytes memory privateKey = ...;\nbytes memory signature = Sapphire.signMessageWithContext(0, privateKey, "message context", "message to sign");\n')),(0,i.kt)("h2",{id:"signature-verification"},"Signature Verification"),(0,i.kt)("h3",{id:"overview-5"},"Overview"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Precompile address: ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0100000000000000000000000000000000000007")),(0,i.kt)("li",{parentName:"ul"},"Parameters: ",(0,i.kt)("inlineCode",{parentName:"li"},"uint method, bytes public_key, bytes context_or_digest, bytes message, bytes signature")),(0,i.kt)("li",{parentName:"ul"},"Gas cost: see below for the method-dependent base cost, plus 8 per word of context and message.")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"context_or_digest")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"messages")," parameters change in meaning\nslightly depending on the method requested. For methods that take a\ncontext value in addition to the message, pass the context in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"context_or_digest")," parameter and use ",(0,i.kt)("inlineCode",{parentName:"p"},"message")," as expected. For methods\nthat take a pre-existing hash of the message, pass that in\n",(0,i.kt)("inlineCode",{parentName:"p"},"context_or_digest")," and leave ",(0,i.kt)("inlineCode",{parentName:"p"},"message")," empty."),(0,i.kt)("p",null,"Ensure that the digest matches the selected method when using variants\nthat take a pre-existing hashes."),(0,i.kt)("p",null,"Available methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Ed25519Oasis"),"): takes a context, gas cost 110,000,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Ed25519Pure"),"): pass empty context, gas cost 110,000,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"2")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Ed25519PrehashedSha512"),"):, takes a pre-existing hash, gas cost 110,000,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"3")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Secp256k1Oasis"),"): takes a context, gas cost 210,000,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"4")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Secp256k1PrehashedKeccak256"),"): takes a pre-existing hash, gas cost 210,000,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"5")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Secp256k1PrehashedSha256"),"): takes a pre-existing hash, gas cost 210,000.")),(0,i.kt)("h3",{id:"example-4"},"Example"),(0,i.kt)("p",null,"Using the Sapphire library:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'bytes memory publicKey = ...;\nbytes memory privateKey = ...;\nbytes memory signature = ...;\nbool result = Sapphire.verifySignatureWithContext(Sapphire.SigningAlg.Ed25519Oasis, publicKey, signature, "message context", "message to check");\n')))}c.isMDXComponent=!0}}]);